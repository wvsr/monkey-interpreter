// This file contains utility functions for tracing the execution flow of the parser.
// These helpers are primarily used for debugging purposes. They allow a developer to
// see the call stack and the flow of control within the parser by printing messages
// when specific parsing functions are entered and exited. This is particularly useful
// when debugging complex recursive descent or Pratt parsers, as it helps visualize
// the parsing process and identify where issues might be occurring.
// The tracing output is indented to reflect the nesting level of function calls.
package parser

import (
	"fmt"
	"strings"
)

// traceLevel is a global variable that keeps track of the current nesting level
// of traced function calls. It is incremented when a traced function is entered
// and decremented when it is exited. This level is used by `identLevel` to
// determine the amount of indentation for trace messages, providing a visual
// representation of the call stack depth.
var traceLevel int = 0

// traceIdentPlaceholder is a constant string (e.g., a tab "\t" or a few spaces)
// used as the basic unit of indentation for trace messages. The `identLevel`
// function repeats this placeholder `traceLevel` times to create the actual
// indentation string.
const traceIdentPlaceholder string = "\t"

// identLevel generates an indentation string based on the current `traceLevel`.
// It repeats the `traceIdentPlaceholder` string `traceLevel-1` times.
// The subtraction of 1 is likely to ensure that the top-level calls (traceLevel 1)
// are not indented, or have a minimal indent if traceLevel starts at 0 and is incremented before first use.
// If traceLevel starts at 0, it should be `strings.Repeat(traceIdentPlaceholder, traceLevel)`.
// Given `incIdent` happens before `tracePrint` in `trace`, if `traceLevel` starts at 0,
// then the first call will have `traceLevel = 1`, and `identLevel` will produce no indent.
// Subsequent nested calls will produce indent.
func identLevel() string {
	// Corrected: If traceLevel is 0 or 1, it should produce no or minimal indent.
	// The original `traceLevel-1` would lead to negative repeats if traceLevel was 0.
	// Assuming traceLevel is incremented *before* the first call to identLevel within a trace context.
	if traceLevel <= 1 {
		return ""
	}
	return strings.Repeat(traceIdentPlaceholder, traceLevel-1)
}

// tracePrint prints the given string `fs` to standard output, prefixed by the
// current indentation level generated by `identLevel()`. This ensures that
// trace messages are visually aligned according to their call stack depth.
func tracePrint(fs string) {
	fmt.Printf("%s%s\n", identLevel(), fs)
}

// incIdent increments the global `traceLevel` by 1.
// This is called when entering a traced function.
func incIdent() { traceLevel = traceLevel + 1 }

// decIdent decrements the global `traceLevel` by 1.
// This is called when exiting a traced function.
func decIdent() { traceLevel = traceLevel - 1 }

// trace is called at the beginning of a parsing function that is being traced.
// Its purpose is to:
// 1. Increment the `traceLevel` to reflect the new nesting depth.
// 2. Print a "BEGIN <msg>" message, where `<msg>` is typically the name of the
//    function being entered. This message is indented according to the new `traceLevel`.
// It returns the `msg` string, which is often the name of the function. This return value
// can then be conveniently passed to `untrace` in a `defer` statement.
// Example usage: `defer untrace(trace("myParsingFunction"))`
func trace(msg string) string {
	incIdent()             // Increment indent level for the current function call.
	tracePrint("BEGIN " + msg) // Print the entry message.
	return msg                 // Return the message, typically for use with `untrace`.
}

// untrace is typically called using `defer` at the beginning of a traced parsing function.
// This ensures that `untrace` is executed when the traced function exits, regardless of
// how it exits (e.g., normal return, panic).
// Its purpose is to:
// 1. Print an "END <msg>" message, where `<msg>` is the same message passed to the
//    corresponding `trace` call (usually the function name). This message is indented
//    at the same level as the "BEGIN" message for that function.
// 2. Decrement the `traceLevel` to restore the previous indentation level for subsequent
//    trace messages from the caller function.
func untrace(msg string) {
	tracePrint("END " + msg) // Print the exit message.
	decIdent()               // Decrement indent level as we are exiting the function.
}
